//es6模块加载的机制
//es6模块加载是编译时加载，编译时就能确定模块的依赖关系，以及输入和输出的变量，CommonJS和AMD，都只能在运行时确定
//es6模块输出的是值的引用，CommonJS模块输出的是值的拷贝
//CommonJS中一旦输出了一个值，模块内部的变化就影响不到这个值
//es6模块的运行机制不同，JS引擎对脚本静态分析的时候，遇到模块加载命令import，就会生成一个只读引用，等到脚本真正执行的时候，再根据这个只读引用，到被加载的模块中去取值。原始值变了，import加载的值也回跟着变，因此，es6模块是动态引用，并且不会缓存，模块里的变量绑定其所在的模块
//es6输入的模块变量是只读引用，可以添加属性，但是不能重新赋值
//export接口输出的是同一个值，不同的脚本加载这个接口，得到的是同一个实例
export let c = new Funn()